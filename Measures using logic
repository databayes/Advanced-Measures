---------------------------------------
-- Measure: [Countrows w/ virtual rows]
---------------------------------------
MEASURE 'Advanced Examples'[Countrows w/ virtual rows] = 
    // this allows you find how many of the sales were generated by the top 5 Products
    COUNTROWS(
        CALCULATETABLE(
            'Sales',
            TOPN(
                5,
                ALL( 'Products' ),
                // there's an embedded calculate to consider the context applied to the total sales - do you want to consider total sales in all time (all) or in selected time based on measures (all selected), or in the row context - then just measure
                [£ Total Sales],
                //CALCULATE([# Total Sales], ALL('Date')),
                DESC
            )
        )
    )
    Description = "Expression:

// this allows you find how many of the sales were generated by the top 5 Products
COUNTROWS(
    CALCULATETABLE(Sales, 
        TOPN(5, ALL(Products), 
        // there's an embedded calculate to consider the context applied to the total sales - do you want to consider total sales in all time (all) or in selected time based on measures (all selected), or in the row context - then just measure
            [£ Total Sales],
            //CALCULATE([# Total Sales], ALL('Date')), 
            DESC)
    )
)"
    FormatString = "0"

---------------------------------
-- Measure: [End of Year Balance]
---------------------------------
MEASURE 'Advanced Examples'[End of Year Balance] = 
    // this gives the value at the end of the Year - can give fiscal year
    CALCULATE( [£ Total Sales], ENDOFYEAR( 'Date'[Date] ) )
    Description = "Expression:

// this gives the value at the end of the Year - can give fiscal year
CALCULATE([£ Total Sales], ENDOFYEAR('Date'[Date]))"

--------------------------
-- Measure: [HasOne Value]
--------------------------
MEASURE 'Advanced Examples'[HasOne Value] = 
    // shows true if only value returned for both indirect and direct filters
    HASONEVALUE( 'Sales'[Channel] )
    Description = "Expression:

// shows true if only value returned for both indirect and direct filters
HASONEVALUE(Sales[Channel])"
    FormatString = """TRUE"";""TRUE"";""FALSE"""

----------------------------------
-- Measure: [HasOneFilter Example]
----------------------------------
MEASURE 'Advanced Examples'[HasOneFilter Example] = 
    // Shows true if only one filter applied for direct filters
    HASONEFILTER( 'Sales'[Channel] )
    Description = "Expression:

// Shows true if only one filter applied for direct filters
HASONEFILTER(Sales[Channel])"
    FormatString = """TRUE"";""TRUE"";""FALSE"""

-------------------------
-- Measure: [High Months]
-------------------------
MEASURE 'Advanced Examples'[High Months] = SUMX( VALUES( 'Date'[MonthnYear] ), [Is High Value] )
    Description = "Expression:

SUMX(
    VALUES('Date'[MonthnYear]),
    [Is High Value]
)"
    FormatString = "0"

---------------------------
-- Measure: [High Months 2]
---------------------------
MEASURE 'Advanced Examples'[High Months 2] = 
    // removes granularity of date column excepte for DateMonthYear
    SUMX(
        VALUES( 'Date'[MonthnYear] ),
        CALCULATE(
            [Is High Value],
            ALLEXCEPT( 'Date', 'Date'[MonthnYear] )
        )
    )
    Description = "Expression:

// removes granularity of date column excepte for DateMonthYear
SUMX(
    VALUES('Date'[MonthnYear]),
    CALCULATE(
    [Is High Value],
    ALLEXCEPT('Date', 'Date'[MonthnYear])
    ))"
    FormatString = "0"

---------------------------
-- Measure: [High Months 3]
---------------------------
MEASURE 'Advanced Examples'[High Months 3] = 
    VAR DaysATCurrentGrain = COUNTROWS( 'Date' )
    VAR DAysATFormulaGrain =
        CALCULATE(
            COUNTROWS( 'Date' ),
            REMOVEFILTERS( 'Date' ), -- can't use allexcept as there is no context transition applied, it's a variable
            VALUES( 'Date'[MonthnYear] )
        )
    VAR IsSafeToCompute = DaysATCurrentGrain = DAysATFormulaGrain
    VAR Result =
        IF(
            IsSafeToCompute,
            SUMX( VALUES( 'Date'[MonthnYear] ), [Is High Value] )
        )
    RETURN
        Result
    Description = "Expression:

VAR DaysATCurrentGrain = COUNTROWS('Date')
VAR DAysATFormulaGrain = CALCULATE(COUNTROWS('Date'),
REMOVEFILTERS('Date'), -- can't use allexcept as there is no context transition applied, it's a variable
VALUES('Date'[MonthnYear])
)
VAR IsSafeToCompute = DaysATCurrentGrain = DAysATFormulaGrain
VAR Result = IF(IsSafeToCompute, SUMX(VALUES('Date'[MonthnYear]), [Is High Value]))

RETURN 
Result
"
    FormatString = "0"

---------------------------------------
-- Measure: [Is Cross Filtered Example]
---------------------------------------
MEASURE 'Advanced Examples'[Is Cross Filtered Example] = 
    // cross filtered gives a true / false depending upon whether a filter is applied to the result
    // does not have to be the filter in the visual, could be from another table - direct and indirect filters
    ISCROSSFILTERED( 'Sales'[Channel] )
    Description = "Expression:

// cross filtered gives a true / false depending upon whether a filter is applied to the result
// does not have to be the filter in the visual, could be from another table - direct and indirect filters
ISCROSSFILTERED(Sales[Channel])"
    FormatString = """TRUE"";""TRUE"";""FALSE"""

---------------------------------
-- Measure: [Is Filtered Example]
---------------------------------
MEASURE 'Advanced Examples'[Is Filtered Example] = 
    // gives a true / false depending upon whether a filter has been applied on the visual - direct filter not indirect
    // Curbal has good clip explaining https://www.youtube.com/watch?v=_ABW2iF8xzk&t=412s
    ISFILTERED( 'Sales'[Channel] )
    Description = "Expression:

// gives a true / false depending upon whether a filter has been applied on the visual - direct filter not indirect
// Curbal has good clip explaining https://www.youtube.com/watch?v=_ABW2iF8xzk&t=412s
ISFILTERED(Sales[Channel])"
    FormatString = """TRUE"";""TRUE"";""FALSE"""

---------------------------
-- Measure: [Is High Value]
---------------------------
MEASURE 'Advanced Examples'[Is High Value] = IF( [£ Total Sales] > 5000000, 1 )
    Description = "Expression:
IF([£ Total Sales] > 5000000,1)"
    FormatString = "0"

---------------------------------------
-- Measure: [Iterating Example Related]
---------------------------------------
MEASURE 'Advanced Examples'[Iterating Example Related] = 
    // related doesnt care about the direction of the relationship, it just needs a relationship
    SUMX(
        'Sales',
        'Sales'[Order Quantity]
            * RELATED( 'Products'[Average Pricing] )
    )
    Description = "Expression:

// related doesnt care about the direction of the relationship, it just needs a relationship
SUMX(Sales,
    Sales[Order Quantity] * RELATED(Products[Average Pricing]))"

---------------------------
-- Measure: [Minimum Sales]
---------------------------
MEASURE 'Advanced Examples'[Minimum Sales] = 
    // summarise creates a talbe of customer name, total sales cy , total sales ly and then works out the min value
    
    SUMX(
        SUMMARIZE(
            'Customers',
            'Customers'[Customer Names],
            "@Sales", [£ Total Sales],
            "@LY Sales", [£ Sales LY]
        ),
        MIN( [@Sales], [@LY Sales] )
    )
    Description = "Expression:

// summarise creates a talbe of customer name, total sales cy , total sales ly and then works out the min value

SUMX(
    SUMMARIZE(Customers, Customers[Customer Names],
    ""@Sales"", [£ Total Sales],
    ""@LY Sales"", [£ Sales LY]),
        MIN([@Sales], [@LY Sales])
)"
    FormatString = """£""#,0;-""£""#,0;""£""#,0"

-----------------------------------------
-- Measure: [Opening Month Sales Balance]
-----------------------------------------
MEASURE 'Advanced Examples'[Opening Month Sales Balance] = 
    // retrieve the value from the last day of the previous month
    // can look at change in value from start of the month
    OPENINGBALANCEMONTH( [£ Total Sales], 'Date'[Date] )
    Description = "Expression:

// retrieve the value from the last day of the previous month
// can look at change in value from start of the month
OPENINGBALANCEMONTH([£ Total Sales], 'Date'[Date])"

-----------------------------------
-- Measure: [Sales of Top Products]
-----------------------------------
MEASURE 'Advanced Examples'[Sales of Top Products] = 
    CALCULATE(
        [£ Total Sales],
        FILTER( 'Products', 'Products'[Product Group] = "Top" )
    )
    Description = "Expression:

CALCULATE([£ Total Sales],
FILTER(Products, Products[Product Group] = ""Top""))"

------------------------------------
-- Measure: [Start of Month Balance]
------------------------------------
MEASURE 'Advanced Examples'[Start of Month Balance] = 
    // this gives the value at the start of the month
    CALCULATE( [£ Total Sales], STARTOFMONTH( 'Date'[Date] ) )
    Description = "Expression:

// this gives the value at the start of the month
CALCULATE([£ Total Sales], STARTOFMONTH('Date'[Date]))"
